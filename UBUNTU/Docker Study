Docker Study


ubuntu 20.04 server with btrfs
#sudo apt update
#sudo apt install apt-transport-https ca-certificates curl software-properties-common
#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
#sudo apt update
##apt-cache policy docker-ce (to check if install from docker repo)
##sudo apt install docker-ce
##sudo systemctl status docker (check status)

Add normal user to docker
#sudo usermod -aG docker ${USER}
#su - ${USER}
#id -nG

Docker commands
docker 
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Docker containers are built from Docker images. By default, Docker pulls these images from Docker Hub, a Docker registry managed by Docker.

#docker run hello-world
#docker search ubuntu
check if image official

#docker pull ubuntu
#docker images

Interactive shell access to container
#docker run -it ubuntu 
#apt update
#apt install nodejs
#node -v
#exit

Managing Docker container
#docker ps (running container)
#docker ps -a (all active and inactive)
#docker ps -l  (latest)

#docker [start/stop/rm] containerID/ContainerName
# docker --name name1 --rm  (name to customise and rm to remove when stopped)

#docker commit -m "ubuntu nodejs" -a "Munish" c3e9e2661d73 munishstudy73/ubuntunodejs:{tag}
i.e. container_id repository/new_image_name


DockerHub login
#docker login -u {docker username}

Rename image file to match docker hub
docker tag sammy/ubuntu-nodejs docker-registry-username/ubuntu-nodejs

Push image
docker commit -m "ubuntu nodejs" -a "Munish" c3e9e2661d73 munishstudy73/ubuntunodejs


#docker version
#docker info

Running jenkins
# docker pull jenkins/jenkins
#docker run -d -p 8080:8080 -p 50000:50000 jenkins/jenkins:latest
-d daemon mode
-p port redirect -p [host_ip]:[host_port]:[container_port]

> accesing shell in running docker
#docker exec -it <container name> /bin/bash 
#docker exec -it <container name> <command>

>to attach terminal to container
#docker attach container
differnce between docker attach and docker exec is that when docker attach is closed, container closes which is not incase of exec

> docker run command to build and run docker
docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
docker run [docker_image]

Install devilbox
apt install git
git clone https://github.com/cytopia/devilbox 



Install portainer
$ docker volume create portainer_data
$ docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer


